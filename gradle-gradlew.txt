#Gradle 与 Gradlew(Gradle Wrapper)

1. 为什么要使用Gradle Wrapper
Gradle Wrapper为Gradle项目的使用者（下称用户）带来好处的，而不是项目的原始开发者（下称作者）。
如果作者在他的Gradle项目中设置了Wrapper，那么其他用户在构建时，可以直接执行以下命令：

★ ./gradlew [task] (UNIX/Linux)
★ gradlew [task] (Windows)

每一个Wrapper都会绑定到一个特定版本的Gradle，当用户第一次执行上面的命令时，Wrapper会自动地下载并安装对应版本的Gradle。
这就带来两个好处：
	①用户不必自己下载、安装、配置Gradle
	②用户进行项目构建时能够确保使用正确的Gradle版本（特别是在构建历史项目时特别明显）

在配置了Wrapper的Gradle项目中，会存在以下的重要文件:
★　gradlew (Unix) 或者 gradlew.bat (Windows)
★　gradle/wrapper/gradle-wrapper.jar (Wrapper JAR)
★　gradle/wrapper/gradler-wrapper.properties (Wrapper properties)
#如果自动下载gradle时发生错误，也可以手动下载，然后按照以下格式修改gradler-wrapper.properties
distributionUrl=file\:/C:/Users/junzhang/Downloads/gradle-3.3-all.zip

以上文件都应该放入到版本控制系统中。
下载的Gradle发行版被存放在目录 $USER_HOME/.gradle/wrapper/dists 中 

2. 将Wrapper添加到Gradle项目

在命令行中运行 wrapper task 即可配置Wrapper，如下：

$gradle wrapper --gradle-version <gradle version> #gradle wrapper --gradle-version 2.14
:wrapper
BUILD SUCCESSFUL
Total time: 3.546 secs

运行完毕后，可以看到在项目的目录中多了上面提到的一些文件和目录：
|__build.gradle
|__gradle
   |__wrapper
      |__gradle-wrapper.jar
      |__gradle-wrapper.properties
|__gradlew
|__gradlew.bat

除了直接在命令行执行外，也可以在build.gradle文件中添加一个 Wrapper task：
task wrapper(type : Wrapper) {
  gradleVersion = '2.14'
}

然后执行这个task：
gradle -q wrapper

3. 使用gradlew
当用户安装好了Wrapper后，会在项目的根目录下看到gradlew，它的使用与gradle是一样的。

例如，如果要运行clean和build这个两个task，那么可以执行:
./gradlew clean build

如果要使用build.gradle以外的gradle文件中的task时，请使用以下命令：gradlew -b xxx.gradle <taskname>